{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\wangr\\\\Documents\\\\code-repo\\\\cds-frontend\\\\cds-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\nconst computePosition = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (reference, floating, config) {\n    const {\n      placement = 'bottom',\n      strategy = 'absolute',\n      middleware = [],\n      platform\n    } = config;\n    const rtl = yield platform.isRTL == null ? void 0 : platform.isRTL(floating);\n    {\n      if (platform == null) {\n        console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n      }\n      if (middleware.filter(_ref => {\n        let {\n          name\n        } = _ref;\n        return name === 'autoPlacement' || name === 'flip';\n      }).length > 1) {\n        throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n      }\n    }\n    let rects = yield platform.getElementRects({\n      reference,\n      floating,\n      strategy\n    });\n    let {\n      x,\n      y\n    } = computeCoordsFromPlacement(rects, placement, rtl);\n    let statefulPlacement = placement;\n    let middlewareData = {};\n    let _debug_loop_count_ = 0;\n    for (let i = 0; i < middleware.length; i++) {\n      {\n        _debug_loop_count_++;\n        if (_debug_loop_count_ > 100) {\n          throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n        }\n      }\n      const {\n        name,\n        fn\n      } = middleware[i];\n      const {\n        x: nextX,\n        y: nextY,\n        data,\n        reset\n      } = yield fn({\n        x,\n        y,\n        initialPlacement: placement,\n        placement: statefulPlacement,\n        strategy,\n        middlewareData,\n        rects,\n        platform,\n        elements: {\n          reference,\n          floating\n        }\n      });\n      x = nextX != null ? nextX : x;\n      y = nextY != null ? nextY : y;\n      middlewareData = {\n        ...middlewareData,\n        [name]: {\n          ...middlewareData[name],\n          ...data\n        }\n      };\n      if (reset) {\n        if (typeof reset === 'object') {\n          if (reset.placement) {\n            statefulPlacement = reset.placement;\n          }\n          if (reset.rects) {\n            rects = reset.rects === true ? yield platform.getElementRects({\n              reference,\n              floating,\n              strategy\n            }) : reset.rects;\n          }\n          ({\n            x,\n            y\n          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n        }\n        i = -1;\n        continue;\n      }\n    }\n    return {\n      x,\n      y,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData\n    };\n  });\n  return function computePosition(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nfunction detectOverflow(_x4, _x5) {\n  return _detectOverflow.apply(this, arguments);\n}\nfunction _detectOverflow() {\n  _detectOverflow = _asyncToGenerator(function* (middlewareArguments, options) {\n    var _await$platform$isEle;\n    if (options === void 0) {\n      options = {};\n    }\n    const {\n      x,\n      y,\n      platform,\n      rects,\n      elements,\n      strategy\n    } = middlewareArguments;\n    const {\n      boundary = 'clippingAncestors',\n      rootBoundary = 'viewport',\n      elementContext = 'floating',\n      altBoundary = false,\n      padding = 0\n    } = options;\n    const paddingObject = getSideObjectFromPadding(padding);\n    const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n    const element = elements[altBoundary ? altContext : elementContext];\n    const clippingClientRect = rectToClientRect(yield platform.getClippingRect({\n      element: ((_await$platform$isEle = yield platform.isElement == null ? void 0 : platform.isElement(element)) != null ? _await$platform$isEle : true) ? element : element.contextElement || (yield platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating)),\n      boundary,\n      rootBoundary,\n      strategy\n    }));\n    const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n      rect: elementContext === 'floating' ? {\n        ...rects.floating,\n        x,\n        y\n      } : rects.reference,\n      offsetParent: yield platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating),\n      strategy\n    }) : rects[elementContext]);\n    return {\n      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n      right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n    };\n  });\n  return _detectOverflow.apply(this, arguments);\n}\nconst min = Math.min;\nconst max = Math.max;\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  fn(middlewareArguments) {\n    return _asyncToGenerator(function* () {\n      // Since `element` is required, we don't Partial<> the type\n      const {\n        element,\n        padding = 0\n      } = options != null ? options : {};\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        platform\n      } = middlewareArguments;\n      if (element == null) {\n        {\n          console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n        }\n        return {};\n      }\n      const paddingObject = getSideObjectFromPadding(padding);\n      const coords = {\n        x,\n        y\n      };\n      const axis = getMainAxisFromPlacement(placement);\n      const alignment = getAlignment(placement);\n      const length = getLengthFromAxis(axis);\n      const arrowDimensions = yield platform.getDimensions(element);\n      const minProp = axis === 'y' ? 'top' : 'left';\n      const maxProp = axis === 'y' ? 'bottom' : 'right';\n      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n      const startDiff = coords[axis] - rects.reference[axis];\n      const arrowOffsetParent = yield platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element);\n      let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n      if (clientSize === 0) {\n        clientSize = rects.floating[length];\n      }\n      const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n      // point is outside the floating element's bounds\n\n      const min = paddingObject[minProp];\n      const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n      const offset = within(min, center, max); // Make sure that arrow points at the reference\n\n      const alignmentPadding = alignment === 'start' ? paddingObject[minProp] : paddingObject[maxProp];\n      const shouldAddOffset = alignmentPadding > 0 && center !== offset && rects.reference[length] <= rects.floating[length];\n      const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n      return {\n        [axis]: coords[axis] - alignmentOffset,\n        data: {\n          [axis]: offset,\n          centerOffset: center - offset\n        }\n      };\n    })();\n  }\n});\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    fn(middlewareArguments) {\n      return _asyncToGenerator(function* () {\n        var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n        const {\n          x,\n          y,\n          rects,\n          middlewareData,\n          placement,\n          platform,\n          elements\n        } = middlewareArguments;\n        const {\n          alignment = null,\n          allowedPlacements = allPlacements,\n          autoAlignment = true,\n          ...detectOverflowOptions\n        } = options;\n        const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n        const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);\n        const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n        const currentPlacement = placements[currentIndex];\n        if (currentPlacement == null) {\n          return {};\n        }\n        const {\n          main,\n          cross\n        } = getAlignmentSides(currentPlacement, rects, yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)); // Make `computeCoords` start from the right place\n\n        if (placement !== currentPlacement) {\n          return {\n            x,\n            y,\n            reset: {\n              placement: placements[0]\n            }\n          };\n        }\n        const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n        const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n          placement: currentPlacement,\n          overflows: currentOverflows\n        }];\n        const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n        if (nextPlacement) {\n          return {\n            data: {\n              index: currentIndex + 1,\n              overflows: allOverflows\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n        const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n          let {\n            overflows\n          } = _ref;\n          return overflows.every(overflow => overflow <= 0);\n        })) == null ? void 0 : _placementsSortedByLe.placement;\n        const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n        if (resetPlacement !== placement) {\n          return {\n            data: {\n              index: currentIndex + 1,\n              overflows: allOverflows\n            },\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n        return {};\n      })();\n    }\n  };\n};\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    fn(middlewareArguments) {\n      return _asyncToGenerator(function* () {\n        var _middlewareData$flip;\n        const {\n          placement,\n          middlewareData,\n          rects,\n          initialPlacement,\n          platform,\n          elements\n        } = middlewareArguments;\n        const {\n          mainAxis: checkMainAxis = true,\n          crossAxis: checkCrossAxis = true,\n          fallbackPlacements: specifiedFallbackPlacements,\n          fallbackStrategy = 'bestFit',\n          flipAlignment = true,\n          ...detectOverflowOptions\n        } = options;\n        const side = getSide(placement);\n        const isBasePlacement = side === initialPlacement;\n        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n        const placements = [initialPlacement, ...fallbackPlacements];\n        const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);\n        const overflows = [];\n        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n        if (checkMainAxis) {\n          overflows.push(overflow[side]);\n        }\n        if (checkCrossAxis) {\n          const {\n            main,\n            cross\n          } = getAlignmentSides(placement, rects, yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n          overflows.push(overflow[main], overflow[cross]);\n        }\n        overflowsData = [...overflowsData, {\n          placement,\n          overflows\n        }]; // One or more sides is overflowing\n\n        if (!overflows.every(side => side <= 0)) {\n          var _middlewareData$flip$, _middlewareData$flip2;\n          const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n          const nextPlacement = placements[nextIndex];\n          if (nextPlacement) {\n            // Try next placement and re-run the lifecycle\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n          let resetPlacement = 'bottom';\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n          if (placement !== resetPlacement) {\n            return {\n              reset: {\n                placement: resetPlacement\n              }\n            };\n          }\n        }\n        return {};\n      })();\n    }\n  };\n};\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (_temp) {\n  let {\n    strategy = 'referenceHidden',\n    ...detectOverflowOptions\n  } = _temp === void 0 ? {} : _temp;\n  return {\n    name: 'hide',\n    fn(middlewareArguments) {\n      return _asyncToGenerator(function* () {\n        const {\n          rects\n        } = middlewareArguments;\n        switch (strategy) {\n          case 'referenceHidden':\n            {\n              const overflow = yield detectOverflow(middlewareArguments, {\n                ...detectOverflowOptions,\n                elementContext: 'reference'\n              });\n              const offsets = getSideOffsets(overflow, rects.reference);\n              return {\n                data: {\n                  referenceHiddenOffsets: offsets,\n                  referenceHidden: isAnySideFullyClipped(offsets)\n                }\n              };\n            }\n          case 'escaped':\n            {\n              const overflow = yield detectOverflow(middlewareArguments, {\n                ...detectOverflowOptions,\n                altBoundary: true\n              });\n              const offsets = getSideOffsets(overflow, rects.floating);\n              return {\n                data: {\n                  escapedOffsets: offsets,\n                  escaped: isAnySideFullyClipped(offsets)\n                }\n              };\n            }\n          default:\n            {\n              return {};\n            }\n        }\n      })();\n    }\n  };\n};\nfunction convertValueToCoords(_x6, _x7) {\n  return _convertValueToCoords.apply(this, arguments);\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\nfunction _convertValueToCoords() {\n  _convertValueToCoords = _asyncToGenerator(function* (middlewareArguments, value) {\n    const {\n      placement,\n      platform,\n      elements\n    } = middlewareArguments;\n    const rtl = yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n    const side = getSide(placement);\n    const alignment = getAlignment(placement);\n    const isVertical = getMainAxisFromPlacement(placement) === 'x';\n    const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n    const crossAxisMulti = rtl && isVertical ? -1 : 1;\n    const rawValue = typeof value === 'function' ? value(middlewareArguments) : value; // eslint-disable-next-line prefer-const\n\n    let {\n      mainAxis,\n      crossAxis,\n      alignmentAxis\n    } = typeof rawValue === 'number' ? {\n      mainAxis: rawValue,\n      crossAxis: 0,\n      alignmentAxis: null\n    } : {\n      mainAxis: 0,\n      crossAxis: 0,\n      alignmentAxis: null,\n      ...rawValue\n    };\n    if (alignment && typeof alignmentAxis === 'number') {\n      crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n    }\n    return isVertical ? {\n      x: crossAxis * crossAxisMulti,\n      y: mainAxis * mainAxisMulti\n    } : {\n      x: mainAxis * mainAxisMulti,\n      y: crossAxis * crossAxisMulti\n    };\n  });\n  return _convertValueToCoords.apply(this, arguments);\n}\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    fn(middlewareArguments) {\n      return _asyncToGenerator(function* () {\n        const {\n          x,\n          y\n        } = middlewareArguments;\n        const diffCoords = yield convertValueToCoords(middlewareArguments, value);\n        return {\n          x: x + diffCoords.x,\n          y: y + diffCoords.y,\n          data: diffCoords\n        };\n      })();\n    }\n  };\n};\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    fn(middlewareArguments) {\n      return _asyncToGenerator(function* () {\n        const {\n          x,\n          y,\n          placement\n        } = middlewareArguments;\n        const {\n          mainAxis: checkMainAxis = true,\n          crossAxis: checkCrossAxis = false,\n          limiter = {\n            fn: _ref => {\n              let {\n                x,\n                y\n              } = _ref;\n              return {\n                x,\n                y\n              };\n            }\n          },\n          ...detectOverflowOptions\n        } = options;\n        const coords = {\n          x,\n          y\n        };\n        const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);\n        const mainAxis = getMainAxisFromPlacement(getSide(placement));\n        const crossAxis = getCrossAxis(mainAxis);\n        let mainAxisCoord = coords[mainAxis];\n        let crossAxisCoord = coords[crossAxis];\n        if (checkMainAxis) {\n          const minSide = mainAxis === 'y' ? 'top' : 'left';\n          const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n          const min = mainAxisCoord + overflow[minSide];\n          const max = mainAxisCoord - overflow[maxSide];\n          mainAxisCoord = within(min, mainAxisCoord, max);\n        }\n        if (checkCrossAxis) {\n          const minSide = crossAxis === 'y' ? 'top' : 'left';\n          const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n          const min = crossAxisCoord + overflow[minSide];\n          const max = crossAxisCoord - overflow[maxSide];\n          crossAxisCoord = within(min, crossAxisCoord, max);\n        }\n        const limitedCoords = limiter.fn({\n          ...middlewareArguments,\n          [mainAxis]: mainAxisCoord,\n          [crossAxis]: crossAxisCoord\n        });\n        return {\n          ...limitedCoords,\n          data: {\n            x: limitedCoords.x - x,\n            y: limitedCoords.y - y\n          }\n        };\n      })();\n    }\n  };\n};\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({\n        ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    fn(middlewareArguments) {\n      return _asyncToGenerator(function* () {\n        const {\n          placement,\n          rects,\n          platform,\n          elements\n        } = middlewareArguments;\n        const {\n          apply,\n          ...detectOverflowOptions\n        } = options;\n        const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);\n        const side = getSide(placement);\n        const alignment = getAlignment(placement);\n        let heightSide;\n        let widthSide;\n        if (side === 'top' || side === 'bottom') {\n          heightSide = side;\n          widthSide = alignment === ((yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)) ? 'start' : 'end') ? 'left' : 'right';\n        } else {\n          widthSide = side;\n          heightSide = alignment === 'end' ? 'top' : 'bottom';\n        }\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        const dimensions = {\n          availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n          availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n        };\n        const prevDimensions = yield platform.getDimensions(elements.floating);\n        apply == null ? void 0 : apply({\n          ...middlewareArguments,\n          ...dimensions\n        });\n        const nextDimensions = yield platform.getDimensions(elements.floating);\n        if (prevDimensions.width !== nextDimensions.width || prevDimensions.height !== nextDimensions.height) {\n          return {\n            reset: {\n              rects: true\n            }\n          };\n        }\n        return {};\n      })();\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    fn(middlewareArguments) {\n      return _asyncToGenerator(function* () {\n        var _await$platform$getCl;\n        const {\n          placement,\n          elements,\n          rects,\n          platform,\n          strategy\n        } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n        // ClientRect's bounds, despite the event listener being triggered. A\n        // padding of 2 seems to handle this issue.\n\n        const {\n          padding = 2,\n          x,\n          y\n        } = options;\n        const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n          rect: rects.reference,\n          offsetParent: yield platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating),\n          strategy\n        }) : rects.reference);\n        const clientRects = (_await$platform$getCl = yield platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference)) != null ? _await$platform$getCl : [];\n        const paddingObject = getSideObjectFromPadding(padding);\n        function getBoundingClientRect() {\n          // There are two rects and they are disjoined\n          if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n            var _clientRects$find;\n\n            // Find the first rect in which the point is fully inside\n            return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n          } // There are 2 or more connected rects\n\n          if (clientRects.length >= 2) {\n            if (getMainAxisFromPlacement(placement) === 'x') {\n              const firstRect = clientRects[0];\n              const lastRect = clientRects[clientRects.length - 1];\n              const isTop = getSide(placement) === 'top';\n              const top = firstRect.top;\n              const bottom = lastRect.bottom;\n              const left = isTop ? firstRect.left : lastRect.left;\n              const right = isTop ? firstRect.right : lastRect.right;\n              const width = right - left;\n              const height = bottom - top;\n              return {\n                top,\n                bottom,\n                left,\n                right,\n                width,\n                height,\n                x: left,\n                y: top\n              };\n            }\n            const isLeftSide = getSide(placement) === 'left';\n            const maxRight = max(...clientRects.map(rect => rect.right));\n            const minLeft = min(...clientRects.map(rect => rect.left));\n            const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n            const top = measureRects[0].top;\n            const bottom = measureRects[measureRects.length - 1].bottom;\n            const left = minLeft;\n            const right = maxRight;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          return fallback;\n        }\n        const resetRects = yield platform.getElementRects({\n          reference: {\n            getBoundingClientRect\n          },\n          floating: elements.floating,\n          strategy\n        });\n        if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n          return {\n            reset: {\n              rects: resetRects\n            }\n          };\n        }\n        return {};\n      })();\n    }\n  };\n};\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["getSide","placement","split","getAlignment","getMainAxisFromPlacement","includes","getLengthFromAxis","axis","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","_ref2","_asyncToGenerator","config","strategy","middleware","platform","isRTL","console","error","join","filter","name","Error","rects","getElementRects","statefulPlacement","middlewareData","_debug_loop_count_","i","fn","nextX","nextY","data","reset","initialPlacement","elements","_x","_x2","_x3","apply","arguments","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","_x4","_x5","_detectOverflow","middlewareArguments","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","offsetParent","getOffsetParent","min","Math","max","within","min$1","value","max$1","arrow","warn","alignment","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","alignmentPadding","shouldAddOffset","alignmentOffset","centerOffset","hash$1","getOppositePlacement","replace","matched","getAlignmentSides","mainAlignmentSide","main","cross","hash","start","end","getOppositeAlignmentPlacement","sides","allPlacements","reduce","acc","concat","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_middlewareData$autoP3","_middlewareData$autoP4","_placementsSortedByLe","detectOverflowOptions","placements","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByLeastOverflow","slice","sort","a","b","placementThatFitsOnAllSides","find","every","resetPlacement","getExpandedPlacements","oppositePlacement","flip","_middlewareData$flip","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","flipAlignment","isBasePlacement","overflowsData","push","_middlewareData$flip$","_middlewareData$flip2","nextIndex","_overflowsData$map$so","map","d","getSideOffsets","isAnySideFullyClipped","some","hide","_temp","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","convertValueToCoords","_x6","_x7","_convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","_middlewareData$offse3","_middlewareData$offse4","isOriginSide","size","heightSide","widthSide","xMin","xMax","yMin","yMax","dimensions","availableHeight","availableWidth","prevDimensions","nextDimensions","inline","_await$platform$getCl","fallback","clientRects","getClientRects","getBoundingClientRect","_clientRects$find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects"],"sources":["C:/Users/wangr/Documents/code-repo/cds-frontend/cds-frontend/node_modules/@floating-ui/core/dist/floating-ui.core.browser.mjs"],"sourcesContent":["function getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (middleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let _debug_loop_count_ = 0;\n\n  for (let i = 0; i < middleware.length; i++) {\n    {\n      _debug_loop_count_++;\n\n      if (_debug_loop_count_ > 100) {\n        throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n      }\n    }\n\n    const {\n      name,\n      fn\n    } = middleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (reset) {\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n    strategy\n  }) : rects[elementContext]);\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const alignment = getAlignment(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max); // Make sure that arrow points at the reference\n\n    const alignmentPadding = alignment === 'start' ? paddingObject[minProp] : paddingObject[maxProp];\n    const shouldAddOffset = alignmentPadding > 0 && center !== offset && rects.reference[length] <= rects.floating[length];\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (_temp) {\n  let {\n    strategy = 'referenceHidden',\n    ...detectOverflowOptions\n  } = _temp === void 0 ? {} : _temp;\n  return {\n    name: 'hide',\n\n    async fn(middlewareArguments) {\n      const {\n        rects\n      } = middlewareArguments;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({ ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply,\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      const prevDimensions = await platform.getDimensions(elements.floating);\n      apply == null ? void 0 : apply({ ...middlewareArguments,\n        ...dimensions\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (prevDimensions.width !== nextDimensions.width || prevDimensions.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}