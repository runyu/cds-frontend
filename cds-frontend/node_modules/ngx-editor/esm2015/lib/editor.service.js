import { Injectable, Optional } from '@angular/core';
import Locals from './Locals';
import * as i0 from "@angular/core";
export class NgxEditorServiceConfig {
    constructor() {
        this.locals = {};
    }
}
NgxEditorServiceConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: NgxEditorServiceConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgxEditorServiceConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: NgxEditorServiceConfig, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: NgxEditorServiceConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export class NgxEditorService {
    constructor(config) {
        this.config = config;
    }
    get locals() {
        return new Locals(this.config.locals);
    }
}
NgxEditorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: NgxEditorService, deps: [{ token: NgxEditorServiceConfig, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NgxEditorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: NgxEditorService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: NgxEditorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: NgxEditorServiceConfig, decorators: [{
                    type: Optional
                }] }]; } });
export const provideMyServiceOptions = (config) => {
    var _a;
    return {
        locals: (_a = config.locals) !== null && _a !== void 0 ? _a : {}
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvZWRpdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckQsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDOztBQUs5QixNQUFNLE9BQU8sc0JBQXNCO0lBSG5DO1FBSVMsV0FBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7bUhBRlksc0JBQXNCO3VIQUF0QixzQkFBc0IsY0FGckIsTUFBTTsyRkFFUCxzQkFBc0I7a0JBSGxDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQVFELE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsWUFBd0IsTUFBK0I7UUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs2R0FUVSxnQkFBZ0Isa0JBR00sc0JBQXNCO2lIQUg1QyxnQkFBZ0IsY0FGZixNQUFNOzJGQUVQLGdCQUFnQjtrQkFINUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7MERBSWtDLHNCQUFzQjswQkFBMUMsUUFBUTs7QUFTdkIsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxNQUF3QixFQUEwQixFQUFFOztJQUMxRixPQUFPO1FBQ0wsTUFBTSxFQUFFLE1BQUEsTUFBTSxDQUFDLE1BQU0sbUNBQUksRUFBRTtLQUM1QixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTmd4RWRpdG9yQ29uZmlnfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBMb2NhbHMgZnJvbSAnLi9Mb2NhbHMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnIHtcbiAgcHVibGljIGxvY2FscyA9IHt9O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hFZGl0b3JTZXJ2aWNlIHtcbiAgY29uZmlnOiBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGNvbmZpZz86IE5neEVkaXRvclNlcnZpY2VDb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfVxuXG4gIGdldCBsb2NhbHMoKTogTG9jYWxzIHtcbiAgICByZXR1cm4gbmV3IExvY2Fscyh0aGlzLmNvbmZpZy5sb2NhbHMpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBwcm92aWRlTXlTZXJ2aWNlT3B0aW9ucyA9IChjb25maWc/OiBOZ3hFZGl0b3JDb25maWcpOiBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnID0+IHtcbiAgcmV0dXJuIHtcbiAgICBsb2NhbHM6IGNvbmZpZy5sb2NhbHMgPz8ge31cbiAgfTtcbn07XG4iXX0=