import { Component, Input } from '@angular/core';
import { MenuService } from './menu.service';
import * as i0 from "@angular/core";
import * as i1 from "./menu.service";
import * as i2 from "./toggle-command/toggle-command.component";
import * as i3 from "./link/link.component";
import * as i4 from "./image/image.component";
import * as i5 from "./dropdown/dropdown.component";
import * as i6 from "./color-picker/color-picker.component";
import * as i7 from "@angular/common";
export const DEFAULT_TOOLBAR = [
    ['bold', 'italic'],
    ['code', 'blockquote'],
    ['underline', 'strike'],
    ['ordered_list', 'bullet_list'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
    ['align_left', 'align_center', 'align_right', 'align_justify'],
];
export const TOOLBAR_MINIMAL = [
    ['bold', 'italic'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
];
const DEFAULT_COLOR_PRESETS = [
    '#b60205',
    '#d93f0b',
    '#fbca04',
    '#0e8a16',
    '#006b75',
    '#1d76db',
    '#0052cc',
    '#5319e7',
    '#e99695',
    '#f9d0c4',
    '#fef2c0',
    '#c2e0c6',
    '#bfdadc',
    '#c5def5',
    '#bfd4f2',
    '#d4c5f9'
];
export class MenuComponent {
    constructor(menuService) {
        this.menuService = menuService;
        this.toolbar = TOOLBAR_MINIMAL;
        this.colorPresets = DEFAULT_COLOR_PRESETS;
        this.disabled = false;
        this.customMenuRef = null;
        this.dropdownPlacement = 'bottom';
        this.toggleCommands = [
            'bold', 'italic',
            'underline', 'strike',
            'code', 'blockquote',
            'ordered_list', 'bullet_list',
            'align_left', 'align_center', 'align_right', 'align_justify'
        ];
        this.iconContainerClass = ['NgxEditor__MenuItem', 'NgxEditor__MenuItem--Icon'];
        this.dropdownContainerClass = ['NgxEditor__Dropdown'];
        this.seperatorClass = ['NgxEditor__Seperator'];
    }
    get presets() {
        const col = 8;
        const colors = [];
        this.colorPresets.forEach((color, index) => {
            const row = Math.floor(index / col);
            if (!colors[row]) {
                colors.push([]);
            }
            colors[row].push(color);
        });
        return colors;
    }
    isDropDown(item) {
        var _a;
        if ((_a = item) === null || _a === void 0 ? void 0 : _a.heading) {
            return true;
        }
        return false;
    }
    getDropdownItems(item) {
        return item;
    }
    ngOnInit() {
        if (!this.editor) {
            throw new Error('NgxEditor: Required editor instance');
        }
        this.menuService.editor = this.editor;
    }
}
MenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: MenuComponent, deps: [{ token: i1.MenuService }], target: i0.ɵɵFactoryTarget.Component });
MenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.9", type: MenuComponent, selector: "ngx-editor-menu", inputs: { toolbar: "toolbar", colorPresets: "colorPresets", disabled: "disabled", editor: "editor", customMenuRef: "customMenuRef", dropdownPlacement: "dropdownPlacement" }, providers: [MenuService], ngImport: i0, template: "<div class=\"NgxEditor__MenuBar\" [ngClass]=\"{'NgxEditor--Disabled': disabled, 'NgxEditor__MenuBar--Reverse': dropdownPlacement === 'top'}\">\n\n  <ng-container *ngFor=\"let toolbarItem of toolbar; let lastToolbarItem = last\">\n    <ng-container *ngFor=\"let item of toolbarItem; let lastItem = last\">\n\n      <!-- toggle icons -->\n      <ngx-toggle-command [toolbarItem]=\"item\" [class]=\"iconContainerClass\" *ngIf=\"toggleCommands.includes(item)\">\n      </ngx-toggle-command>\n\n      <!-- link -->\n      <ngx-link [class]=\"iconContainerClass\" *ngIf=\"item === 'link'\"></ngx-link>\n\n      <!-- image -->\n      <ngx-image [class]=\"iconContainerClass\" *ngIf=\"item === 'image'\">\n      </ngx-image>\n\n      <!-- dropdown -->\n      <ng-container *ngIf=\"isDropDown(item)\">\n        <ngx-dropdown *ngFor=\"let dropdownItem of getDropdownItems(item) | keyvalue\" [class]=\"dropdownContainerClass\"\n          [group]=\"dropdownItem.key\" [items]=\"dropdownItem.value\">\n        </ngx-dropdown>\n      </ng-container>\n\n      <!-- text color picker -->\n      <ngx-color-picker [class]=\"iconContainerClass\" *ngIf=\"item === 'text_color'\" type=\"text_color\"\n        [presets]=\"presets\">\n      </ngx-color-picker>\n      <!-- background color picker -->\n      <ngx-color-picker [class]=\"iconContainerClass\" *ngIf=\"item === 'background_color'\" type=\"background_color\"\n        [presets]=\"presets\">\n      </ngx-color-picker>\n\n      <!-- seperator -->\n      <div [class]=\"seperatorClass\" *ngIf=\"lastItem && !lastToolbarItem\"></div>\n    </ng-container>\n  </ng-container>\n\n  <!-- custom menu -->\n  <ng-container *ngIf=\"customMenuRef\">\n    <ng-container [ngTemplateOutlet]=\"customMenuRef\"></ng-container>\n  </ng-container>\n\n</div>\n", styles: [""], components: [{ type: i2.ToggleCommandComponent, selector: "ngx-toggle-command", inputs: ["toolbarItem"] }, { type: i3.LinkComponent, selector: "ngx-link" }, { type: i4.ImageComponent, selector: "ngx-image" }, { type: i5.DropdownComponent, selector: "ngx-dropdown", inputs: ["group", "items"] }, { type: i6.ColorPickerComponent, selector: "ngx-color-picker", inputs: ["presets", "type"] }], directives: [{ type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "keyvalue": i7.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.9", ngImport: i0, type: MenuComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-editor-menu',
                    templateUrl: './menu.component.html',
                    styleUrls: ['./menu.component.scss'],
                    providers: [MenuService]
                }]
        }], ctorParameters: function () { return [{ type: i1.MenuService }]; }, propDecorators: { toolbar: [{
                type: Input
            }], colorPresets: [{
                type: Input
            }], disabled: [{
                type: Input
            }], editor: [{
                type: Input
            }], customMenuRef: [{
                type: Input
            }], dropdownPlacement: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,